name: Build Library

on: [push, pull_request]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [arm64, x64, x86]
    steps:
      - uses: actions/checkout@v4

      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-i686-toolchain
            mingw-w64-cross-toolchain
            mingw-w64-python
            meson
            ninja

      - name: Build
        shell: msys2 {0}
        run: |
          echo "--- Tool versions ---"
          meson --version
          ninja --version
          gcc --version
          echo "--- Environment ---"
          env | sort
          echo "--- Current directory ---"
          pwd
          ls -la
          echo "Running build.bat for architecture: $ARCHITECTURES"
          cmd.exe /C build.bat

      - name: List project root directory contents (Debug)
        shell: bash
        run: |
          echo "--- Contents of project root directory ($(pwd)) after build ---"
          ls -al
          echo "-------------------------------------------------------------"

      - name: Verify build directory
        shell: bash
        run: |
          echo "Build directory contents:"
          # Check if the 'build' directory exists before listing recursively
          if [ -d "build" ]; then
            ls -R build
          else
            echo "Error: 'build' directory not found!"
            exit 1 # Fail the step explicitly if build is missing
          fi


      - name: Collect artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          echo "Copying build outputs..."

          # Use the matrix variable directly as it's a single value per job
          current_arch=${{ matrix.arch }}
          echo "Processing $current_arch..."

          # Check if the specific build subdirectory exists
          if [ ! -d "build/build_static_${current_arch}" ]; then
            echo "Error: Expected build subdirectory build/build_static_${current_arch} not found!"
            exit 1 # Fail if the expected subdirectory is missing
          fi

          # Find and copy all DLLs, LIBs, and static libs (based on your comment, only DLLs currently copied)
          # find "build/build_static_${current_arch}" \( -name "*.dll" -o -name "*.lib" -o -name "*.a" \) -exec cp {} artifacts/ \;
          # Sticking to your original command:
          find "build/build_static_${current_arch}" -name "*.dll" -exec cp {} artifacts/ \;

          # Optional: Check if any files were copied
          if [ -z "$(ls -A artifacts/ 2>/dev/null)" ]; then
            echo "Warning: No DLLs were found and copied to artifacts for ${current_arch}."
            # Decide if this should be a warning or an error.
            # exit 1 # Uncomment this if no artifacts should be considered a failure
          fi

          echo "Final artifacts:"
          ls -lh artifacts/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: webrtc-audio-processing-${{ matrix.arch }}
          path: artifacts/
          if-no-files-found: error