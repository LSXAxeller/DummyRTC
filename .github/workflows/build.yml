name: Build WebRTC Audio Processing

on:
  push:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds (now using MinGW)
          - os: windows-latest
            rid: win-x64
            platform: Windows
            arch: x64
            toolchain: mingw
            cross_file: "windows-x64.crossfile"

          - os: windows-latest
            rid: win-x86
            platform: Windows
            arch: x86
            toolchain: mingw
            cross_file: "windows-x86.crossfile"

          # Linux builds
          - os: ubuntu-latest
            rid: linux-x64
            platform: Linux
            arch: x86_64
            toolchain: gcc
            cross_file: ""

          - os: ubuntu-latest
            rid: linux-arm
            platform: Linux
            arch: armv7l
            toolchain: gcc
            cross_file: "linux-arm.crossfile"

          - os: ubuntu-latest
            rid: linux-arm64
            platform: Linux
            arch: aarch64
            toolchain: gcc
            cross_file: "linux-arm64.crossfile"

          # macOS builds
          - os: macos-latest
            rid: osx-x64
            platform: macOS
            arch: x86_64
            toolchain: clang
            cross_file: ""

          - os: macos-latest
            rid: osx-arm64
            platform: macOS
            arch: arm64
            toolchain: clang
            cross_file: ""

          # iOS builds
          - os: macos-latest
            rid: ios-arm64
            platform: iOS
            arch: arm64
            toolchain: clang
            cross_file: "ios.crossfile"

          # Android builds
          - os: ubuntu-latest
            rid: android-arm
            platform: Android
            arch: armeabi-v7a
            toolchain: clang
            cross_file: "android-arm.crossfile"

          - os: ubuntu-latest
            rid: android-arm64
            platform: Android
            arch: arm64-v8a
            toolchain: clang
            cross_file: "android-arm64.crossfile"

          - os: ubuntu-latest
            rid: android-x64
            platform: Android
            arch: x86_64
            toolchain: clang
            cross_file: "android-x64.crossfile"

    name: Build for ${{ matrix.platform }} - ${{ matrix.arch }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Setup Python and Meson
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Meson and Ninja
        run: pip install meson ninja

      # Install MinGW for Windows builds
      - name: Install MinGW (Windows)
        if: matrix.platform == 'Windows'
        run: |
          choco install mingw -y --no-progress
          echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" >> $GITHUB_PATH

      # Linux dependencies
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config
          
          # For cross-compilation
          if [ "${{ matrix.rid }}" == "linux-arm" ]; then
            sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
          elif [ "${{ matrix.rid }}" == "linux-arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          fi
          
          if [ "${{ matrix.platform }}" == "Android" ]; then
            sudo apt-get install -y clang
          fi

      # Android NDK setup
      - name: Setup Android NDK
        if: matrix.platform == 'Android'
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d

      # Configure Meson
      - name: Configure Meson
        shell: bash
        run: |
          BUILD_DIR="build_${{ matrix.rid }}"
          EXTRA_ARGS=""
          
          if [ -n "${{ matrix.cross_file }}" ]; then
            meson setup $BUILD_DIR --cross-file crossfiles/${{ matrix.cross_file }} $EXTRA_ARGS
          else
            meson setup $BUILD_DIR $EXTRA_ARGS
          fi

      # Build with Ninja
      - name: Build with Ninja
        shell: bash
        run: |
          BUILD_DIR="build_${{ matrix.rid }}"
          ninja -C $BUILD_DIR

      # Install and package artifacts
      - name: Install and package
        shell: bash
        run: |
          BUILD_DIR="build_${{ matrix.rid }}"
          OUTPUT_DIR="runtimes/${{ matrix.rid }}/native"
          
          mkdir -p $OUTPUT_DIR
          
          if [ "${{ matrix.platform }}" == "Windows" ]; then
            cp $BUILD_DIR/*.dll $OUTPUT_DIR/
          elif [ "${{ matrix.platform }}" == "iOS" ]; then
            # For iOS, we might need to package a framework
            mkdir -p $OUTPUT_DIR/webrtc_audio_processing.framework
            cp $BUILD_DIR/libwebrtc_audio_processing.dylib $OUTPUT_DIR/webrtc_audio_processing.framework/webrtc_audio_processing
          elif [ "${{ matrix.platform }}" == "macOS" ]; then
            cp $BUILD_DIR/libwebrtc_audio_processing.dylib $OUTPUT_DIR/
          else
            cp $BUILD_DIR/libwebrtc_audio_processing.so $OUTPUT_DIR/
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.rid }}
          path: runtimes/${{ matrix.rid }}

  package:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create final package
        run: |
          mkdir -p runtimes
          cp -r artifacts/* runtimes/
          zip -r webrtc-audio-processing.zip runtimes

      - name: Upload final package
        uses: actions/upload-artifact@v4
        with:
          name: webrtc-audio-processing
          path: webrtc-audio-processing.zip