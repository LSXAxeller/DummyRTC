name: Build Library

on: [push, pull_request]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [arm64, x64, x86]

    steps:
      - uses: actions/checkout@v4

      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-i686-toolchain
            mingw-w64-ucrt-x86_64-toolchain
            mingw-w64-cross-toolchain

      - name: Build Meson (arm64)
        if: matrix.architecture == 'arm64'
        shell: msys2 {0}
        run: |
          pacman -S --noconfirm --needed mingw-w64-cross-toolchain
          meson setup build/build_static_arm64 --cross-file cross_arm64.txt
          meson compile -C build/build_static_arm64

      - name: Build Meson (x86)
        if: matrix.architecture == 'x86'
        shell: msys2 {0}
        run: |
          pacman -S --noconfirm --needed mingw-w64-i686-toolchain
          meson setup build/build_static_x86 --cross-file cross_win32.txt
          meson compile -C build/build_static_x86

      - name: Build Meson (x64)
        if: matrix.architecture == 'x64'
        shell: msys2 {0}
        run: |
          pacman -S --noconfirm --needed mingw-w64-x86_64-toolchain
          meson setup build/build_static_x64 --cross-file cross_win64.txt
          meson compile -C build/build_static_x64

      - name: Verify build directory (Debug)
        shell: bash
        run: |
          echo "Build directory contents:"
          # Check if the 'build' directory exists before listing recursively
          build_dir="build/build_static_${{ matrix.architecture }}"
          echo "Checking directory: ${build_dir}"
          if [ -d "${build_dir}" ]; then
            echo "Directory exists. Listing contents:"
            # Use find for recursive listing, ls -R can behave differently on platforms
            find "${build_dir}" -print
          else
            echo "Error: Expected build subdirectory ${build_dir} not found after build step!"
            # Using exit 1 here makes the step correctly fail
            exit 1
          fi

      - name: Collect artifacts (Static Lib)
        shell: bash
        run: |
          mkdir -p artifacts
          echo "Copying build outputs..."

          current_arch=${{ matrix.architecture }}
          echo "Processing $current_arch..."

          build_dir="build/build_static_${current_arch}"

          # Find and copy static libs (.lib or .a)
          # Use find with -exec cp {} artifacts/ \; or xargs for better handling of many files
          # Add a check to ensure the source directory exists
          if [ ! -d "${build_dir}" ]; then
            echo "Error: Build directory '${build_dir}' not found during artifact collection!"
            exit 1
          fi

          # Find files, print them, then copy. Use xargs for robustness.
          find "${build_dir}" \( -name "*.lib" -o -name "*.a" \) -print0 | xargs -0 -I {} cp "{}" artifacts/

          # Check if any files were copied
          if [ -z "$(ls -A artifacts/ 2>/dev/null)" ]; then
            echo "Warning: No static library files (.lib or .a) were found and copied to artifacts for ${current_arch}."
            # The upload step is configured to fail if no files are found,
            # so we don't necessarily need exit 1 here unless you want this step
            # specifically to fail before upload.
          else
            echo "Successfully collected artifacts for ${current_arch}:"
            ls -lh artifacts/
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: webrtc-audio-processing-static-${{ matrix.architecture }}
          path: artifacts/
          if-no-files-found: error # Ensure step fails if no artifacts were collected