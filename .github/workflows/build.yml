name: Build Library

on: [push, pull_request]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [arm64, x64, x86]

    steps:
      - uses: actions/checkout@v4

      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-i686-toolchain
            mingw-w64-cross-toolchain

      - name: Set up Python
        uses: actions/setup-python@v5

      - name: Build Meson (arm64)
        if: matrix.architecture == 'arm64'
        uses: BSFishy/meson-build@v1.0.3
        with:
          action: build
          directory: build/build_static_${{ matrix.architecture }}
          setup-options: --cross-file cross_arm64.txt

      - name: Build Meson (x86)
        if: matrix.architecture == 'x86'
        uses: BSFishy/meson-build@v1.0.3
        with:
          action: build
          directory: build/build_static_${{ matrix.architecture }}
          setup-options: --cross-file cross_win32.txt -Dc_args="-m32 -msse2" -Dcpp_args="-m32 -msse2" -Dc_link_args="-static -m32" -Dcpp_link_args="-static -m32"

      - name: Build Meson (x64)
        if: matrix.architecture == 'x64'
        uses: BSFishy/meson-build@v1.0.3
        with:
          action: build
          directory: build/build_static_${{ matrix.architecture }}
          setup-options: -Dc_args="-m64" -Dcpp_args="-m64" -Dc_link_args="-static -m64" -Dcpp_link_args="-static -m64"

      - name: Verify build directory (Debug)
        shell: bash
        run: |
          echo "Build directory contents:"
          # Check if the 'build' directory exists before listing recursively
          build_dir="build/build_static_${{ matrix.architecture }}"
          echo "Checking directory: ${build_dir}"
          if [ -d "${build_dir}" ]; then
            echo "Directory exists. Listing contents:"
            ls -R "${build_dir}"
          else
            echo "Error: Expected build subdirectory ${build_dir} not found!"
            exit 1 # Fail the step explicitly if build is missing
          fi

      - name: Collect artifacts (Static Lib)
        shell: bash
        run: |
          mkdir -p artifacts
          echo "Copying build outputs..."

          current_arch=${{ matrix.architecture }}
          echo "Processing $current_arch..."

          build_dir="build/build_static_${current_arch}"

          # Find and copy static libs (.lib or .a)
          # Meson/Ninja typically place artifacts in the build directory or a subdirectory like 'src' or 'lib'
          # Adjust path and glob if your project's meson.build places outputs elsewhere
          find "${build_dir}" \( -name "*.lib" -o -name "*.a" \) -print -exec cp {} artifacts/ \;

          # Check if any files were copied
          if [ -z "$(ls -A artifacts/ 2>/dev/null)" ]; then
            echo "Warning: No static library files (.lib or .a) were found and copied to artifacts for ${current_arch}."
            # Decide if this should be a warning or an error.
            # exit 1 # Uncomment this if no artifacts should be considered a failure
          else
            echo "Successfully collected artifacts for ${current_arch}:"
            ls -lh artifacts/
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: webrtc-audio-processing-static-${{ matrix.architecture }} # Changed name to reflect static build
          path: artifacts/
          if-no-files-found: error # Ensure step fails if no artifacts were collected