name: Build WebRTC Audio Processing

on:
  push:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds (now using MinGW)
          - os: windows-latest
            rid: win-x64
            platform: Windows
            arch: x64
            toolchain: mingw
            cross_file: "windows-x64.crossfile"

          - os: windows-latest
            rid: win-x86
            platform: Windows
            arch: x86
            toolchain: mingw
            cross_file: "windows-x86.crossfile"

    name: Build for ${{ matrix.platform }} - ${{ matrix.arch }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Setup Python and Meson
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Meson and Ninja
        run: pip install meson ninja

      # Install MinGW for Windows builds
      - name: Set up MinGW (Windows - x64)
        if: matrix.platform == 'Windows' && matrix.arch == 'x64'
        uses: deevroman/setup-mingw@0.0.1
        with:
          platform: x64
          static: any

      - name: Set up MinGW (Windows - x86)
        if: matrix.platform == 'Windows' && matrix.arch == 'x86'
        uses: deevroman/setup-mingw@0.0.1
        with:
          platform: any
          static: any

      # Linux dependencies
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest' && matrix.platform == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config
          
          # For cross-compilation
          if [ "${{ matrix.rid }}" == "linux-arm" ]; then
            sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
          elif [ "${{ matrix.rid }}" == "linux-arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          fi

      # Android setup
      - name: Install Dependencies (Android)
        if: matrix.platform == 'Android'
        uses: android-actions/setup-android@v2

      - name: Set up Android NDK
        if: matrix.platform == 'Android'
        shell: bash
        run: |
          # Set API level
          echo "API_LEVEL=21" >> $GITHUB_ENV
          
          # Determine compiler prefix based on architecture
          if [ "${{ matrix.arch }}" == "armeabi-v7a" ]; then
            echo "COMPILER_PREFIX=armv7a-linux-androideabi" >> $GITHUB_ENV
          elif [ "${{ matrix.arch }}" == "arm64-v8a" ]; then
            echo "COMPILER_PREFIX=aarch64-linux-android" >> $GITHUB_ENV
          elif [ "${{ matrix.arch }}" == "x86_64" ]; then
            echo "COMPILER_PREFIX=x86_64-linux-android" >> $GITHUB_ENV
          fi
          
          echo "CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/${COMPILER_PREFIX}${API_LEVEL}-clang" >> $GITHUB_ENV
          echo "CXX=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/${COMPILER_PREFIX}${API_LEVEL}-clang++" >> $GITHUB_ENV
          echo "STRIP=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip" >> $GITHUB_ENV

      # Configure Meson
      - name: Configure Meson
        shell: bash
        run: |
          BUILD_DIR="build_${{ matrix.rid }}"
          EXTRA_ARGS=""
          
          if [ "${{ matrix.platform }}" == "Android" ]; then
              EXTRA_ARGS="--cross-file crossfiles/${{ matrix.cross_file }}"
              EXTRA_ARGS+=" -Dc_args=--target=${COMPILER_PREFIX}${API_LEVEL}"
              EXTRA_ARGS+=" -Dcpp_args=--target=${COMPILER_PREFIX}${API_LEVEL}"
              meson setup $BUILD_DIR $EXTRA_ARGS
          elif [ -n "${{ matrix.cross_file }}" ]; then
            meson setup $BUILD_DIR --cross-file crossfiles/${{ matrix.cross_file }} $EXTRA_ARGS
          else
            meson setup $BUILD_DIR $EXTRA_ARGS
          fi

      # Build with Ninja
      - name: Build with Ninja
        shell: bash
        run: |
          BUILD_DIR="build_${{ matrix.rid }}"
          ninja -C $BUILD_DIR

      # Package the artifacts
      - name: Copy artifacts
        shell: bash
        run: |
          BUILD_DIR="build_${{ matrix.rid }}/webrtc/modules/audio_processing"
          OUTPUT_DIR="runtimes/${{ matrix.rid }}/native"
          
          # List contents of the build directory before copying
          echo "Listing contents of BUILD_DIR: $BUILD_DIR"
          ls -l "$BUILD_DIR"

          mkdir -p $OUTPUT_DIR
          
          if [ "${{ matrix.platform }}" == "Windows" ]; then
            cp $BUILD_DIR/*.dll $OUTPUT_DIR/
          elif [ "${{ matrix.platform }}" == "iOS" ]; then
            # For iOS, we need to package a framework
            mkdir -p $OUTPUT_DIR/webrtc_audio_processing.framework
            cp $BUILD_DIR/*.dylib $OUTPUT_DIR/webrtc_audio_processing.framework/webrtc_audio_processing
          elif [ "${{ matrix.platform }}" == "macOS" ]; then
            cp $BUILD_DIR/*.dylib $OUTPUT_DIR/
          else
            cp $BUILD_DIR/*.so $OUTPUT_DIR/
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.rid }}
          path: runtimes/${{ matrix.rid }}

  package:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create final package
        run: |
          mkdir -p runtimes
          cp -r artifacts/* runtimes/
          zip -r webrtc-audio-processing.zip runtimes

      - name: Upload final package
        uses: actions/upload-artifact@v4
        with:
          name: webrtc-audio-processing
          path: webrtc-audio-processing.zip